notes to self about release versions of an apk



./gradlew assembleRelease


keytool -genkey -v -keystore my-release-key.keystore -alias alias_name -keyalg RSA -keysize 2048 -validity 10000


jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore my-release-key.keystore my_application.apk alias_name


jarsigner -verify -verbose -certs my_application.apk


zipalign -v 4 your_project_name-unaligned.apk your_project_name.apk









$HOME/.android/debug.keystore


Note: Including the passwords for your release key and keystore inside the build file is not a good security practice. Alternatively, you can configure the build file to obtain these passwords from environment variables or have the build process prompt you for these passwords.

To obtain these passwords from environment variables:

storePassword System.getenv("KSTOREPWD")
keyPassword System.getenv("KEYPWD")

To have the build process prompt you for these passwords if you are invoking the build from the command line:

storePassword System.console().readLine("\nKeystore password: ")
keyPassword System.console().readLine("\nKey password: ")











android {
    ...
    defaultConfig { ... }
    signingConfigs {
        release {
            storeFile file("myreleasekey.keystore")
            storePassword "password"
            keyAlias "MyReleaseKey"
            keyPassword "password"
        }
    }
    buildTypes {
        release {
            ...
            signingConfig signingConfigs.release
        }
    }
}







To run on emulator

adb -d install path/to/your/app.apk























Like the post says, make sure you can run these commands from a shell: keytool, jarsigner, zipalign, ant.  I didn’t have ant, so I installed it from here, following these steps (specifically everything it says to do under “The Short Story” & “Setup”).  jarsigner and keytool are provided via the JDK which I’d already installed.

Like the post says, I also (apparently) needed cygwin which provides OpenSSL.  After downloading and running the setup.exe cygwin installer, I figured out I needed to filter the install list for ‘openssl’, and then I needed to select each entry for install.  It was all a bit clunky and cryptic, and the installer seemed to crash a couple times.  But it did install (with a bunch of other stuff too apparently).
Run Code:

These are my steps, which more or less follow ckamath’s tutorial in the above post:

    Open a shell.
    Browse to the \android folder where your export data is.  In my case that was:
        C:\sketchbook\floater08\android
        In the below examples, this is the presumed path from the shell that the code is being entered from.

    A: Make your secret key!
    Create the ‘secret key’ that is required for signing your application:
        Here is a template of what to type:
            \android>keytool -genkey -v -keystore <SKETCHNAME>-release-key.keystore -alias <YOURNAME> -keyalg RSA -keysize 2048 -validity 10000
        This is what I typed:
            \android>keytool -genkey -v -keystore floater08-release-key.keystore -alias AKEric -keyalg RSA -keysize 2048 -validity 10000
    It will then ask you several question like “What is your first and last name?”, What is the name of your City or Locality?”, etc.
    When its done (successfully) it will finish by printing:
        [Storing floater08-release-key.keystore]
    And will store the corresponding file:  \android\floater08-release-key.keystore

    B: Create ‘unsigned .apk’
    Execute ant to build the unsiged apk:
        \android>ant release
    This should spit out a bunch of stuff in the shell.  When complete you should see something like:
        BUILD SUCCESSFUL
        Total time: 18 seconds
    If you didn’t have one before, you should now have a \bin folder with the unsigned apk in it:
        C:\sketchbook\floater08\android\bin\floater08-unsigned.apk

    C: Sign the unsigned .apk with the secret key:
    Here is a template of what to type:
        \android>jarsigner -verbose -keystore <SKETCHNAME>-release-key.keystore <FULL PATH TO>\android\bin\<SKETCHNAME>-unsigned.apk <YOUR NAME FROM SECRET KEY STEP>
    This is what I typed:
        \android>jarsigner -verbose -keystore floater08-release-key.keystore C:\sketchbook\floater08\android\bin\floater08-unsigned.apk akeric
    The shell should have several lines of “adding” and “signing”.

    D: Verify that jarsigner did its thing:
    Here is a template of what to type:
        \android>jarsigner -verify <FULL PATH TO>\android\bin\<SKETCHNAME>-unsigned.apk
    This is what I typed:
        \android>jarsigner -verify C:\sketchbook\floater08\android\bin\floater08-unsigned.apk
    If this works you should see in the shell:
        jar verified.

    E: Make signed (and distributable) apk file:
    Here is a template of what to type:
        \android>zipalign -v 4 <FULL PATH TO>\android\bin\<SKETCHNAME>-unsigned.apk   <SKETCHNAME>.apk
    This is what I typed:
        \android>zipalign -v 4 C:\sketchbook\floater08\android\bin\floater08-unsigned.apk   floater08.apk
    The shell will start by saying:
        Verifying alignment of floater08.apk (4)…
    Print a bunch more stuff, and finally:
        Verification successful
    You’ll now find a <SKETCHNAME>.apk file in your \android directory:
        \android\floater08.apk

That apk is now directly consumable by an Android device.  As a test I put it on my ftp, browsed to it from my phone, and it installed immediately.

The next step would be to get it on the Android market, but I’ll work in that in another post.  Happy Holidays!
